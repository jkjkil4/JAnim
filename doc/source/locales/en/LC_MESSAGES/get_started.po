# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, jkjkil4
# This file is distributed under the same license as the JAnim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: JAnim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 22:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/get_started.rst:4
msgid "入门"
msgstr ""

#: ../../source/get_started.rst:7
msgid "简单示例"
msgstr ""

#: ../../source/get_started.rst:9
msgid "为了让你对 JAnim 的结构有个大概的认知， 你可以在你的文件夹内新建一个 ``learn.py`` 文件"
msgstr ""

#: ../../source/get_started.rst:12
msgid "然后将以下代码复制到文件内："
msgstr ""

#: ../../source/get_started.rst:32
msgid "接着在命令行中，使用"
msgstr ""

#: ../../source/get_started.rst:38
msgid "会弹出一个窗口，应当会显示和上面视频一致的内容"
msgstr ""

#: ../../source/get_started.rst:40
msgid "这个窗口默认是置顶的，你可以在菜单栏中取消"
msgstr ""

#: ../../source/get_started.rst:42
msgid "然后，我们具体看一下这段代码干了什么："
msgstr ""

#: ../../source/get_started.rst:14
msgid "这里，我们引入 JAnim 的主要功能，这样就可以在之后使用"
msgstr ""

#: ../../source/get_started.rst:15
msgid ""
"这两行代码定义了一个继承自 :class:`~.Timeline` 的类 ``HelloJAnimExample``， 并且实现了 "
":meth:`~.Timeline.construct` 方法，动画内容就写在该方法中"
msgstr ""

#: ../../source/get_started.rst:18
msgid "``HelloJAnimExample`` 可以写成你想取的名称，随意"
msgstr ""

#: ../../source/get_started.rst:66
msgid "如果你对这两行感到困惑，可以先背下来，作为一种标准的“起手式”"
msgstr ""

#: ../../source/get_started.rst:68
msgid "当然，请将 ``HelloJAnimExample`` 替换为你希望的命名"
msgstr ""

#: ../../source/get_started.rst:70
msgid "我们继续往下看，便是具体动画的部分"
msgstr ""

#: ../../source/get_started.rst:15
msgid "这两行，我们定义了一个圆和一个方形（默认情况下不填充内部）"
msgstr ""

#: ../../source/get_started.rst:17
msgid "并且，将圆设置为了蓝色；"
msgstr ""

#: ../../source/get_started.rst:18
msgid "将方形设置为了绿色，并且设置内部有 50% 透明度的填充"
msgstr ""

#: ../../source/get_started.rst:84
msgid "此时，这两个物件还没有显示出来，我们接着看后面的几行"
msgstr ""

#: ../../source/get_started.rst:18
msgid "这里便是产生动画的代码，按照顺序来看："
msgstr ""

#: ../../source/get_started.rst:20
msgid "``self.forward()`` 向前推进 1s；由于此时没有物件显示，所以这 1s 只有空白的背景"
msgstr ""

#: ../../source/get_started.rst:21
msgid "``self.play(Create(circle))`` 播放圆的创建动画"
msgstr ""

#: ../../source/get_started.rst:22
msgid "``self.play(Transform(circle, square))`` 播放从圆变换到方形的补间动画"
msgstr ""

#: ../../source/get_started.rst:23
msgid "``self.play(Uncreate(square))`` 播放方形消失的动画"
msgstr ""

#: ../../source/get_started.rst:24
msgid "``self.forward()`` 向前推进 1s，和前一个类似"
msgstr ""

#: ../../source/get_started.rst:104
msgid "其中："
msgstr ""

#: ../../source/get_started.rst:106
msgid ":meth:`~.Timeline.forward` 将相同的画面持续一段时间，默认是 1s，你也可以填入具体的秒数"
msgstr ""

#: ../../source/get_started.rst:107
msgid ":meth:`~.Timeline.play` 的基本格式是 ``self.play(动画对象)``，让动画持续一段时间"
msgstr ""

#: ../../source/get_started.rst:109
msgid "比如，你可以把变换的那一行加上 ``duration=2``"
msgstr ""

#: ../../source/get_started.rst:115
msgid "那么动画过程就会持续 2s"
msgstr ""

#: ../../source/get_started.rst:118
msgid "物件"
msgstr ""

#: ../../source/get_started.rst:120
msgid "上面的例子中，涉及到两个物件：:class:`~.Circle` 和 :class:`~.Square`，它们本质上都是几何图形物件"
msgstr ""

#: ../../source/get_started.rst:123
msgid "组件"
msgstr ""

#: ../../source/get_started.rst:127
msgid "对于物件，有一个重要的概念是“组件”"
msgstr ""

#: ../../source/get_started.rst
msgid "每种物件都包含若干的组件，例如，几何图形其实是由“轮廓的描点”所表示的，"
msgstr ""

#: ../../source/get_started.rst
msgid "因此，对于几何图形物件，这些是它的组件："
msgstr ""

#: ../../source/get_started.rst:132
msgid "轮廓坐标 ``points``"
msgstr ""

#: ../../source/get_started.rst:133
msgid "描边粗细 ``radius``"
msgstr ""

#: ../../source/get_started.rst:134
msgid "描边颜色 ``stroke``"
msgstr ""

#: ../../source/get_started.rst:135
msgid "填充颜色 ``fill``"
msgstr ""

#: ../../source/get_started.rst:137
msgid "为了对组件进行操作，你需要 ``物件.组件名.功能()`` ，比如："
msgstr ""

#: ../../source/get_started.rst:143
msgid ""
"这一行会将圆的填充色设置为红色，并且有 50% 的透明度；你可以把这行插入到上面例子的 ``circle = "
"Circle(color=BLUE)`` 的下一行，试试效果"
msgstr ""

#: ../../source/get_started.rst:145
msgid "同样的，``circle.stroke.set(...)`` 会设置描边的颜色"
msgstr ""

#: ../../source/get_started.rst:149
msgid "如果你想将描边和填充的颜色同时进行设置，不必写："
msgstr ""

#: ../../source/get_started.rst:156
msgid "作为一种更简便的写法，你可以将上面的两行写成这样："
msgstr ""

#: ../../source/get_started.rst:162
msgid "这里提供了一个 ``color``，可以同时对描边和填充进行操作"
msgstr ""

#: ../../source/get_started.rst:165
msgid "初始化参数"
msgstr ""

#: ../../source/get_started.rst:167
msgid "还记得前面例子的代码吗？"
msgstr ""

#: ../../source/get_started.rst:175
msgid "这里的代码看起来没有对 ``circle`` 的组件进行操作，那么是如何设置这些物件的颜色的呢？"
msgstr ""

#: ../../source/get_started.rst:177
msgid ""
"你应该注意到了传入 :class:`~.Circle` 和 :class:`~.Square` 的参数，``color=XXX`` 以及 "
"``fill_alpha=XXX``"
msgstr ""

#: ../../source/get_started.rst:179
msgid "具体来说，在创建物件时对组件属性进行设置，并不需要一行一行地列出来，可以全部作为参数直接书写，这里列出几何图形物件可用的一些属性："
msgstr ""

#: ../../source/get_started.rst:183
msgid "``stroke_radius``: 描边的粗细"
msgstr ""

#: ../../source/get_started.rst:185
msgid "``color``: 描边和填充的颜色"
msgstr ""

#: ../../source/get_started.rst:186
msgid "``stroke_color``: 描边颜色，会覆盖 ``color``"
msgstr ""

#: ../../source/get_started.rst:187
msgid "``fill_color``: 填充颜色，会覆盖 ``color``"
msgstr ""

#: ../../source/get_started.rst:189
msgid "``alpha``: 透明度，``1`` 表示完全不透明，``0`` 表示完全透明，``0~1`` 之间的数则为半透明"
msgstr ""

#: ../../source/get_started.rst:190
msgid "``stroke_alpha``: 描边透明度，会覆盖 ``alpha``"
msgstr ""

#: ../../source/get_started.rst:191
msgid "``fill_alpha``: 填充透明度，会覆盖 ``alpha``"
msgstr ""

#: ../../source/get_started.rst:194
msgid "组件动画"
msgstr ""

#: ../../source/get_started.rst:196
msgid "通过前面的学习，我们知道，通过"
msgstr ""

#: ../../source/get_started.rst:202
msgid "可以将圆设置为红色"
msgstr ""

#: ../../source/get_started.rst:204
msgid "这种设置是立刻的，但是如果这样写："
msgstr ""

#: ../../source/get_started.rst:210
msgid "注意这里的区别是，先写 ``.anim`` 再跟上对组件的操作"
msgstr ""

#: ../../source/get_started.rst:212
msgid "这种写法，不再是“设置为红色”，而是会产生一个“从原来的颜色过渡到红色”的动画，可以放在 ``self.play(...)`` 里面显示动画"
msgstr ""

#: ../../source/get_started.rst:214
msgid "比如下面这个例子："
msgstr ""

#: ../../source/get_started.rst:234
msgid "``self.show(circle)`` 是将圆直接显示出来，没有动画过程"
msgstr ""

#: ../../source/get_started.rst:236
msgid "希望你没忘记，执行的命令是："
msgstr ""

#: ../../source/get_started.rst:242
msgid "如果上面这段代码也写在了 ``learn.py`` 中，那么就是："
msgstr ""

#: ../../source/get_started.rst:249
msgid "导出视频"
msgstr ""

#: ../../source/get_started.rst:253
msgid "若要导出视频，请确保安装了 :ref:`FFmpeg <install_dep>` 并正确地将其添加到了环境变量 ``PATH`` 中"
msgstr ""

#: ../../source/get_started.rst:255
msgid "上面进行预览是使用："
msgstr ""

#: ../../source/get_started.rst:261
msgid "如果你想要将这个动画导出为视频，将 ``run`` 替换为 ``write`` 即可："
msgstr ""

#: ../../source/get_started.rst:267
msgid "默认情况下，输出的视频会在目录中的 ``videos/`` 文件夹下"
msgstr ""

#: ../../source/get_started.rst:269
msgid "如果再传入 ``-o``，会在导出结束后自动打开视频文件："
msgstr ""

#: ../../source/get_started.rst:278
msgid "实时预览"
msgstr ""

#: ../../source/get_started.rst:280
msgid "如果每次修改动画都需要关掉窗口、修改代码、重新执行，那么未免有点太麻烦了"
msgstr ""

#: ../../source/get_started.rst:282
msgid ""
"因此，你可以在修改并保存代码后，点击窗口左上角“功能”中的“重新构建”（快捷键是 ``Ctrl+L``）， "
"这样就会更新动画内容，使其和更改后的代码一致"
msgstr ""

#: ../../source/get_started.rst:287
msgid "以下的功能需要使用 :ref:`VS Code <install_vscode>` 作为编辑器"
msgstr ""

#: ../../source/get_started.rst:289
msgid "每次修改完都要手动重新构建可能还是有点麻烦了，如果你使用 VS Code 开发，可以安装 VS Code 插件 ``janim-toolbox``"
msgstr ""

#: ../../source/get_started.rst:291
msgid "运行时，在预览动画的命令中加上 ``-i``，比如："
msgstr ""

#: ../../source/get_started.rst:297
msgid "这样，在执行后，输出内容应当多出这样一句：``交互端口已在 xxxxx 开启``"
msgstr ""

#: ../../source/get_started.rst:301
msgid "你可能注意到了，预览窗口默认是在右半边屏幕置顶的"
msgstr ""

#: ../../source/get_started.rst:303
msgid "这里推荐将 VS Code 放在左半边屏幕，关闭侧边栏进行书写"
msgstr ""

#: ../../source/get_started.rst:305
msgid ""
"首先，在 VS Code 中，默认情况下，需要按下 ``Ctrl+J Ctrl+C`` （分别按下，这是组合键），如果成功的话， 会在 VS "
"Code 右下角的状态栏中显示 ``已连接到界面端 xxxxx``"
msgstr ""

#: ../../source/get_started.rst:308
msgid "接着，对代码进行更改，保存后，就会立即更新预览的内容"
msgstr ""

