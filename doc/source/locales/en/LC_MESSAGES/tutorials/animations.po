# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, jkjkil4
# This file is distributed under the same license as the JAnim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: JAnim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 22:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/tutorials/animations.rst:2
msgid "动画系统"
msgstr ""

#: ../../source/tutorials/animations.rst:4
msgid "到目前为止，你已经见到了两种动画创建方式："
msgstr ""

#: ../../source/tutorials/animations.rst:6
msgid "通过 ``物件.anim`` 创建组件插值动画"
msgstr ""

#: ../../source/tutorials/animations.rst:8
msgid "通过 ``动画名(物件, 动画参数)`` 为物件应用内置的特殊动画效果"
msgstr ""

#: ../../source/tutorials/animations.rst:37
msgid ":class:`~.Create` :class:`~.SpinInFromNothing` :meth:`~.Item.anim`"
msgstr ""

#: ../../source/tutorials/animations.rst:31
msgid "基础动画参数"
msgstr ""

#: ../../source/tutorials/animations.rst:33
msgid "无论是哪种创建动画的方式，它们都有几个关键的参数"
msgstr ""

#: ../../source/tutorials/animations.rst:35
msgid "``duration``: 动画持续时间"
msgstr ""

#: ../../source/tutorials/animations.rst:37
msgid "大多数动画的默认时长是 1 秒，如果你需要更长或者更短的时间可以额外设置"
msgstr ""

#: ../../source/tutorials/animations.rst:39
msgid "``at``: 动画开始的时间点"
msgstr ""

#: ../../source/tutorials/animations.rst:41
msgid "意味着动画会在当前时刻的多少秒之后才开始，比如 ``at=1, duration=2`` 意味着动画会在当前时刻的 1 秒后开始，进行 2 秒"
msgstr ""

#: ../../source/tutorials/animations.rst:43
msgid "这个参数在接下来将要讲的“动画组”的内容中，会更加实用"
msgstr ""

#: ../../source/tutorials/animations.rst:45
msgid "``rate_func``: 动画的缓动函数"
msgstr ""

#: ../../source/tutorials/animations.rst:47
msgid "大多数动画默认以 :func:`~.smooth` 的方式进行插值，使得动画过程在开始和结束的时候较慢，中间过程较快，总体上表现为一个平滑的过渡"
msgstr ""

#: ../../source/tutorials/animations.rst:49
msgid ""
"其它一些常用的缓动函数还有 :func:`~.linear`，使得动画全程匀速进行； 以及 :func:`~.rush_into` "
":func:`~.rush_from` 等，具体请参考 :ref:`rate_functions` 中的介绍"
msgstr ""

#: ../../source/tutorials/animations.rst:54
msgid ""
"上面这些参数可以调整动画的表现细节，例如 ``duration`` 可以调整动画快慢，控制节奏， ``at`` 可以控制动画的开始时机； "
"当你想要让物体快速进入并逐渐减速时，可以考虑使用 :func:`~.rush_into` "
"作为缓动函数；总之，可以多多地探索这些参数的使用，获得更好的动画效果。"
msgstr ""

#: ../../source/tutorials/animations.rst:57
msgid "以下是对上面的动画参数进行一些调整后的示例："
msgstr ""

#: ../../source/tutorials/animations.rst:90
msgid ""
"将 :class:`~.Create` 和 :class:`~.SpinInFromNothing` 的缓动函数改为了 "
":func:`~.rush_from`，并缩短它们进入的时长"
msgstr ""

#: ../../source/tutorials/animations.rst:92
msgid "将移动动画的缓动函数改为了 :func:`~.ease_out_bounce`，使得物体在移动终点处有一个弹跳的效果"
msgstr ""

#: ../../source/tutorials/animations.rst:94
msgid "将变色动画的时长改为了 2 秒"
msgstr ""

#: ../../source/tutorials/animations.rst:98
msgid "在 ``.anim`` 后紧跟括号填入参数即可改变其动画参数。"
msgstr ""

#: ../../source/tutorials/animations.rst:100
msgid "在合适的地方增加换行可以优化代码的可读性，特别是在动画调用较长的时候。"
msgstr ""

#: ../../source/tutorials/animations.rst:103
msgid "动画组"
msgstr ""

#: ../../source/tutorials/animations.rst:105
msgid "动画并不是只能像上面一样单独依次执行，我们还可以让多个动画一起执行，创建更加丰富的动画效果。"
msgstr ""

#: ../../source/tutorials/animations.rst:107
msgid "首先是最基础的， 放在同一个 ``self.play`` 函数中的动画会一起执行，你也可以给动画分别传入 ``at`` 参数来控制它们的开始时机："
msgstr ""

#: ../../source/tutorials/animations.rst:39
msgid ":class:`~.FadeIn` :meth:`~.Item.anim` :meth:`~.Cmpt_Points.to_border`"
msgstr ""

#: ../../source/tutorials/animations.rst:131
msgid "你还可以使用 :class:`~.AnimGroup` :class:`~.Succession` 等方式来组合多个动画。"
msgstr ""

#: ../../source/tutorials/animations.rst:133
msgid "其中 :class:`~.AnimGroup` 只是单纯地将多个动画组合到一起，可以统一应用 ``at`` 和 ``duration`` 等参数"
msgstr ""

#: ../../source/tutorials/animations.rst:135
msgid ":class:`~.AnimGroup` 会根据传入的 ``duration`` 参数将内部动画结构进行整体伸缩以匹配时长"
msgstr ""

#: ../../source/tutorials/animations.rst:137
msgid ":class:`~.Succession` 则会将多个动画串联起来，前一个动画结束后再开始下一个动画"
msgstr ""

#: ../../source/tutorials/animations.rst:48
msgid ""
":class:`~.Succession` :class:`~.AnimGroup` "
":class:`~.ShowCreationThenDestructionAround`"
msgstr ""

#: ../../source/tutorials/animations.rst:174
msgid ""
"其实 ``self.play`` 函数本身就充当一个 :class:`~.AnimGroup` 的角色， 所以你可以直接将多个动画放在 "
"``self.play`` 中，并应用 ``at`` 和 ``duration`` 等参数。"
msgstr ""

#: ../../source/tutorials/animations.rst:179
msgid ""
"关于动画组的更多内容，可以参考 :doc:`../janim/anims/composition` 中的介绍， 其中还提及了关于 "
"``lag_ratio`` 和 ``offset`` 参数的使用，这里不再展开叙述。"
msgstr ""

#: ../../source/tutorials/animations.rst:183
msgid "预先设置动画"
msgstr ""

#: ../../source/tutorials/animations.rst:185
msgid ""
"当我们使用 ``self.play`` 播放一个长达 4 秒的动画之后，当前时刻便会跳转至 4 秒后， 但是我们就失去了在这 4 "
"秒内创建其它动画的机会，因为只能往前走而不能倒退。"
msgstr ""

#: ../../source/tutorials/animations.rst:188
msgid "因此，JAnim 提供了一个实用的功能——预先设置动画，但不在时间上前进，可以调用 ``self.prepare`` 做到："
msgstr ""

#: ../../source/tutorials/animations.rst:34
msgid ":meth:`~.Timeline.prepare` :class:`~.Text` :class:`~.CircleIndicate`"
msgstr ""

#: ../../source/tutorials/animations.rst:209
msgid ""
"在该示例中，我们使用 ``self.prepare`` 预先设置了一个 :class:`~.CircleIndicate` 动画， "
"使得在文字在后续的移动动画中，能够在预先设置的时间段看到黄圈高亮的效果。"
msgstr ""

#: ../../source/tutorials/animations.rst:214
msgid "从原理上来讲，其实 ``play`` 就是 ``prepare + forward`` 的组合。"
msgstr ""

#: ../../source/tutorials/animations.rst:217
msgid "内置动画"
msgstr ""

#: ../../source/tutorials/animations.rst:219
msgid "关于更多可用的内置动画，可查阅以下列表中的内容："
msgstr ""

#: ../../source/tutorials/animations.rst:221
msgid ":doc:`../janim/anims/composition`"
msgstr ""

#: ../../source/tutorials/animations.rst:222
msgid ":doc:`../janim/anims/creation`"
msgstr ""

#: ../../source/tutorials/animations.rst:223
msgid ":doc:`../janim/anims/fading`"
msgstr ""

#: ../../source/tutorials/animations.rst:224
msgid ":doc:`../janim/anims/growing`"
msgstr ""

#: ../../source/tutorials/animations.rst:225
msgid ":doc:`../janim/anims/indication`"
msgstr ""

#: ../../source/tutorials/animations.rst:226
msgid ":doc:`../janim/anims/movement`"
msgstr ""

#: ../../source/tutorials/animations.rst:227
msgid ":doc:`../janim/anims/rotation`"
msgstr ""

#: ../../source/tutorials/animations.rst:228
msgid ":doc:`../janim/anims/transform`"
msgstr ""

#: ../../source/tutorials/animations.rst:229
msgid ":doc:`../janim/anims/updater`"
msgstr ""

#: ../../source/tutorials/animations.rst:231
msgid "JAnim 还有一个重要的特性是“动画复合”，我们将在 :ref:`updaters` 中详细介绍这一特性。"
msgstr ""

#: ../../source/tutorials/animations.rst:234
msgid "``.r`` 的使用"
msgstr ""

#: ../../source/tutorials/animations.rst:236
msgid ""
"在 JAnim 中，由于 **物件-组件** 的结构关系，导致在一个组件中进行完操作后， 需要使用 ``.r`` "
"来返回物件级别，从而再访问物件或是其它组件中的功能，例如："
msgstr ""

#: ../../source/tutorials/animations.rst:243
msgid "或是对于动画而言"
msgstr ""

