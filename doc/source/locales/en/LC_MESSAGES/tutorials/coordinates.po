# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, jkjkil4
# This file is distributed under the same license as the JAnim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: JAnim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 22:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/tutorials/coordinates.rst:2
msgid "坐标系统"
msgstr ""

#: ../../source/tutorials/coordinates.rst:4
msgid ""
"JAnim 的坐标系统不以像素为单位，而是采用水平方向约 ``-7.11 ~ 7.11``，垂直方向 ``-4 ~ 4`` 的坐标范围，形成一个 "
"16:9 的画面。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:6
msgid "原点位于画面中心，向右向上为正方向，下图展现了创建在 JAnim 画面上的坐标系网格以及放置于原点处的单位圆："
msgstr ""

#: ../../source/tutorials/coordinates.rst:18
msgid "这里的 ``xxx.show()`` 与 ``self.show(xxx)`` 一样，都是将物件直接显示出来"
msgstr ""

#: ../../source/tutorials/coordinates.rst:22
msgid "为了方便起见，这里提供的代码省略了 ``construct`` 方法之外的内容，只展示 ``construct`` 的核心部分"
msgstr ""

#: ../../source/tutorials/coordinates.rst:24
msgid "类似情况不再赘述"
msgstr ""

#: ../../source/tutorials/coordinates.rst:26
msgid ""
"在之前的简要介绍中，我们提到 JAnim 的几何 **物件** 含有多个 **组件**，包括 ``points``、 ``stroke``、 "
"``fill`` 等； 而其中与坐标系统相关的组件是 ``points``，它决定了物件的形状和位置。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:29
msgid "所以在大多数情况下，当我们想要“操作物件的坐标”时，先 ``.points`` 再做具体操作就对了！"
msgstr ""

#: ../../source/tutorials/coordinates.rst:32
msgid "坐标平移"
msgstr ""

#: ../../source/tutorials/coordinates.rst:34
msgid "``points`` 组件提供了多种方法来操作物件的坐标，这里先介绍两个基础方法："
msgstr ""

#: ../../source/tutorials/coordinates.rst:38
#: ../../source/tutorials/coordinates.rst:99
#: ../../source/tutorials/coordinates.rst:183
msgid "方法"
msgstr ""

#: ../../source/tutorials/coordinates.rst:39
#: ../../source/tutorials/coordinates.rst:100
#: ../../source/tutorials/coordinates.rst:184
msgid "示例"
msgstr ""

#: ../../source/tutorials/coordinates.rst:40
#: ../../source/tutorials/coordinates.rst:101
#: ../../source/tutorials/coordinates.rst:185
msgid "描述"
msgstr ""

#: ../../source/tutorials/coordinates.rst:42
msgid ":meth:`~.Cmpt_Points.shift`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:43
msgid "``.shift(RIGHT * 3 + UP * 2)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:44
msgid "根据给定的位移平移物件"
msgstr ""

#: ../../source/tutorials/coordinates.rst:46
msgid ":meth:`~.Cmpt_Points.move_to`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:47
msgid "``.move_to(ORIGIN)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:48
msgid "将物件移动到指定位置"
msgstr ""

#: ../../source/tutorials/coordinates.rst:50
msgid "例如，使用 ``.move_to(RIGHT * 3 + UP * 2)`` 可以将物件移动到坐标系中 ``(3,2)`` 的位置："
msgstr ""

#: ../../source/tutorials/coordinates.rst:59
msgid ""
"上面的例子中，我们组合 ``UP`` （向上） 和 ``RIGHT`` （向右） 这两个内置向量表示出了圆的位移； 你也可以猜到，还有 "
"``DOWN`` （向下） 和 ``LEFT`` （向左） 这两个内置向量可以使用。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:62
msgid "这些内置向量方便在 JAnim 中快速表示坐标位移，只需要使用位移距离乘以方向，再依次组合即可。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:64
msgid "JAnim 还内置了更多额外方向，如图所示："
msgstr ""

#: ../../source/tutorials/coordinates.rst:73
msgid "边上的这四个向量需要使用 ``Config.get`` 来获取，这是因为他们是由视框大小这一可配置项所决定的， 并不是像单位向量这样的固定向量。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:76
msgid "关于 :class:`~.Config` 的更多内容，可以参考 :ref:`config_system`。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:78
msgid "除了使用内置方向的组合表示坐标，还可以直接使用坐标值来表示位置。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:80
msgid ""
"例如，上面提到的 ``.move_to(RIGHT * 3 + UP * 2)`` 等效于 ``.move_to([3, 2, "
"0])``，也就是将物件移动到 ``[3, 2, 0]`` 的位置。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:84
msgid "尽管我们现在讨论的是画面上的二维坐标，但其实 JAnim 的坐标系统是三维的，物件和摄像机可以在空间中自由移动，所以这里还出现了第三个分量。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:86
msgid "但在大多数情况下，我们只需要关注前两个坐标轴（x 和 y）就够用了，将 z 轴取为 0 即可。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:88
msgid "关于三维坐标的更多内容，可以参考 :ref:`3d_coordinates`。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:93
msgid "相对放置"
msgstr ""

#: ../../source/tutorials/coordinates.rst:95
msgid "除了上述的平移方法，物件还可以放置在其它物件以及边界旁边："
msgstr ""

#: ../../source/tutorials/coordinates.rst:103
msgid ":meth:`~.Cmpt_Points.next_to`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:104
msgid "``.next_to(square, RIGHT)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:105
msgid "将物件放置在另一个物件旁边"
msgstr ""

#: ../../source/tutorials/coordinates.rst:107
msgid ":meth:`~.Cmpt_Points.align_to`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:108
msgid "``.align_to(square, UP)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:109
msgid "将物件与另一个物件在某个方向上对齐"
msgstr ""

#: ../../source/tutorials/coordinates.rst:111
msgid ":meth:`~.Cmpt_Points.to_border`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:112
msgid "``.to_border(UL)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:113
msgid "将物件放到画面某个方向的边界旁"
msgstr ""

#: ../../source/tutorials/coordinates.rst:115
msgid "让我们结合动画来演示这些方法的使用，这里是将一个圆形四处移动，尝试放在矩形旁边以及边界旁边："
msgstr ""

#: ../../source/tutorials/coordinates.rst:119
msgid ""
"回忆一下，对于立刻作用的 ``circle.points.next_to(...)`` 等方法， 在物件后面插入 ``.anim`` "
"便可使其成为可播放的动画，即"
msgstr ""

#: ../../source/tutorials/coordinates.rst:158
msgid "上面提供的动画代码实际执行时没有坐标系网格和文字备注，那些是笔者额外添加的；"
msgstr ""

#: ../../source/tutorials/coordinates.rst:160
msgid "且进行了降速处理，方便观看动画过程。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:162
msgid "示例中的方法出现了一些额外的参数："
msgstr ""

#: ../../source/tutorials/coordinates.rst:164
msgid "``buff``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:166
msgid ""
"表示物件与目标物件或边界之间的间距，间距从小到大可用 ``SMALL_BUFF``、 ``MED_SMALL_BUFF``、 "
"``MED_LARGE_BUFF``、 ``LARGE_BUFF`` 以及直接数值表示"
msgstr ""

#: ../../source/tutorials/coordinates.rst:168
msgid "物件之间的间距默认为 ``MED_SMALL_BUFF``，物件与边界直接的间距默认为 ``MED_LARGE_BUFF``。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:170
msgid "``aligned_edge``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:172
msgid "表示物件与目标物件的对齐边缘，"
msgstr ""

#: ../../source/tutorials/coordinates.rst:174
msgid "比如示例中的 ``aligned_edge=UP`` 表示将圆形放置在方形右侧的同时，使它们的上边缘对齐。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:177
msgid "形状变换"
msgstr ""

#: ../../source/tutorials/coordinates.rst:179
msgid "常用的形状变换包括缩放与旋转："
msgstr ""

#: ../../source/tutorials/coordinates.rst:187
msgid ":meth:`~.Cmpt_Points.scale`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:188
msgid "``.scale(2)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:189
msgid "缩放物件"
msgstr ""

#: ../../source/tutorials/coordinates.rst:191
msgid ":meth:`~.Cmpt_Points.stretch`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:192
msgid "``.stretch(2, dim=0)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:193
msgid "在某个方向上拉伸物件，``dim=0 dim=1 dim=2`` 分别表示 x、y、z 轴"
msgstr ""

#: ../../source/tutorials/coordinates.rst:195
msgid ":meth:`~.Cmpt_Points.rotate`"
msgstr ""

#: ../../source/tutorials/coordinates.rst:196
msgid "``.rotate(PI / 4)``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:197
msgid "旋转物件，逆时针为正方向"
msgstr ""

#: ../../source/tutorials/coordinates.rst:199
msgid "让我们结合动画来演示这些方法的使用，这里是将一个正六边形进行若干形状变换："
msgstr ""

#: ../../source/tutorials/coordinates.rst:217
msgid ""
"首先对于旋转操作，传入的数值应是弧度制，JAnim 也内置了常用角度的常量，如 ``PI`` 和 ``TAU``。 也可以使用如 ``30 * "
"DEGREES`` 的形式表示角度值，这与 ``PI / 6`` 等价。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:220
msgid "对于一些额外的参数："
msgstr ""

#: ../../source/tutorials/coordinates.rst:222
msgid "``about_edge``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:224
msgid "表示缩放或旋转时的参考边缘，默认为 ``ORIGIN``，即物件的中心点。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:226
msgid ""
"例如在 ``.scale(0.25, about_edge=RIGHT)`` "
"中，将缩放的参考点设置为物件的右边缘，使得物件被缩小时右边缘位置不变，其余部分向右边缘聚拢。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:228
msgid "``about_point``"
msgstr ""

#: ../../source/tutorials/coordinates.rst:230
msgid "表示缩放或旋转时的参考点，默认为 ``None``，会根据 ``about_edge`` 取参考点，即默认以物件的中心；"
msgstr ""

#: ../../source/tutorials/coordinates.rst:232
msgid "可以设置为某个点，表示以全局坐标中的该点为参考点。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:234
msgid ""
"例如在 ``.rotate(120 * DEGREES, about_point=ORIGIN)`` "
"中，将旋转的参考点设置为全局坐标的原点，使得物件围绕原点旋转。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:15
msgid "这两行看起来都是“将物件绕原点逆时针旋转 120 度”，但其实存在本质上的差异。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:17
msgid "前者是 ``poly`` 的组件动画，本质上是对操作前后的 ``poly`` 的 **插值效果**，是直线变换而非弧线移动，并没有真正的旋转效果；"
msgstr ""

#: ../../source/tutorials/coordinates.rst:19
msgid "而后者 :class:`~.Rotate` 作为专门的一个动画类，使得物件沿着圆弧路径旋转，产生真正的旋转效果。"
msgstr ""

#: ../../source/tutorials/coordinates.rst:21
msgid "另请参考 :ref:`janim_anims_rotation` 页面的介绍。"
msgstr ""

