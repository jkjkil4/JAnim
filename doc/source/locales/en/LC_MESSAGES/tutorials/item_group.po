# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, jkjkil4
# This file is distributed under the same license as the JAnim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: JAnim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 22:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/tutorials/item_group.rst:2
msgid "物件组"
msgstr ""

#: ../../source/tutorials/item_group.rst:4
msgid "可以使用 :class:`~.Group` 将多个物件组合在一起，这样便可以依照整体的边界框进行整体位移、排列和对齐，以及设置属性与应用动画。"
msgstr ""

#: ../../source/tutorials/item_group.rst:7
msgid "物件组的常用方法"
msgstr ""

#: ../../source/tutorials/item_group.rst:9
msgid "以下给出了两个示例及其解析："
msgstr ""

#: ../../source/tutorials/item_group.rst:34
msgid ":class:`~.Group` :meth:`~.Cmpt_Points.arrange` :meth:`~.Cmpt_Rgbas.fade`"
msgstr ""

#: ../../source/tutorials/item_group.rst:19
msgid ""
"这里创建了一个 ``group``，其中包含了三个子物件： ``Star`` 、 ``Circle`` 和 "
"``RegularPolygon``，并将它们统一设置为蓝色且完全填充。"
msgstr ""

#: ../../source/tutorials/item_group.rst:21
msgid ""
"并通过 :meth:`~.Cmpt_Points.arrange` 方法，将 ``group`` 中的子物件依次向右排列，前后间距为 "
"``MED_LARGE_BUFF``。"
msgstr ""

#: ../../source/tutorials/item_group.rst:25
msgid ""
":meth:`~.Cmpt_Points.arrange` 是 JAnim 中排列物件的一个相当实用的方法， 还有 "
":meth:`~.Cmpt_Points.arrange_in_grid` 方法提供了网格排列的功能， 可另行参考阅读。"
msgstr ""

#: ../../source/tutorials/item_group.rst:14
msgid "将填充颜色整体淡化 70%。"
msgstr ""

#: ../../source/tutorials/item_group.rst:16
msgid ""
"由于 :class:`~.Group` 没有像几何图形物件 :class:`~.VItem` 一样的复杂属性，因此不能直接使用类似 "
"``group.fill.fade(0.7)`` 这样的方式来淡化颜色。"
msgstr ""

#: ../../source/tutorials/item_group.rst:18
msgid ""
"但是可以通过 ``group.astype(VItem).fill.fade(0.7)`` 的方式，把 ``group`` “当作”一个 "
":class:`~.VItem` 来使用原本没有的组件，可以简写为"
msgstr ""

#: ../../source/tutorials/item_group.rst:24
msgid "形式上来讲，写法是： ``group(当作什么物件).组件.操作``。"
msgstr ""

#: ../../source/tutorials/item_group.rst:26
msgid "因为这里是用作动画，所以形式上是 ``group(当作什么物件).anim.组件.操作``。"
msgstr ""

#: ../../source/tutorials/item_group.rst:14
msgid ""
":class:`~.FadeOut` 动画的 ``lag_ratio`` 参数可以控制子物件淡出的延迟比率， 默认 ``0`` "
"表示同时淡出，这里设置了 ``0.5`` 表示前一个淡出 50% 后开始淡出下一个。"
msgstr ""

#: ../../source/tutorials/item_group.rst:39
msgid ":class:`~.Group` :meth:`~.Cmpt_Points.arrange` :class:`~.Indicate`"
msgstr ""

#: ../../source/tutorials/item_group.rst:18
msgid "这里创建了一个 ``group``，其中包含了三个子物件，每个子物件初始化了不同的颜色。"
msgstr ""

#: ../../source/tutorials/item_group.rst:16
msgid "首先用 :class:`~.Indicate` 动画高亮显示整个 ``group``"
msgstr ""

#: ../../source/tutorials/item_group.rst:18
msgid "并且我们可以使用 ``for`` 遍历组内的子物件，依次使用 :class:`~.Indicate` 动画高亮它们。"
msgstr ""

#: ../../source/tutorials/item_group.rst:14
msgid ""
"通过 ``group[1]`` 访问 ``group`` 中下标为 1 的，即第二个子物件 ``Circle``，将其填充透明度设置为 "
"``0.5``。"
msgstr ""

#: ../../source/tutorials/item_group.rst:133
msgid "物件组的嵌套"
msgstr ""

#: ../../source/tutorials/item_group.rst:135
msgid ""
"显而易见，我们完全可以把一个 :class:`~.Group` 作为另一个 :class:`~.Group` 的子物件（这里笔者随便搓了一个 "
"``HelloJAnimExample`` 代码的示意动画）："
msgstr ""

#: ../../source/tutorials/item_group.rst:45
msgid ":class:`~.Text` :class:`~.Group` :class:`~.Arrow` :class:`~.Transform`"
msgstr ""

#: ../../source/tutorials/item_group.rst:165
msgid "这里将一个“圆形指向方形”的 ``shapes`` 组对齐到文字的下方，然后又和文字创建了一个 ``group`` 组。"
msgstr ""

#: ../../source/tutorials/item_group.rst:167
msgid "在进行动画时，通过对各元素的操作以及对物件组的切片（例如 ``shapes[1:]``）来创建各种动画效果。"
msgstr ""

#: ../../source/tutorials/item_group.rst:169
msgid "有关物件组的用法你可以继续挖掘，探索更多可能！"
msgstr ""

#: ../../source/tutorials/item_group.rst:173
msgid "其实文字物件就是一个嵌套的物件组，其中包含了多个“文字行”物件，每个“文字行”物件又包含多个“字符”物件。"
msgstr ""

#: ../../source/tutorials/item_group.rst:175
msgid "具体可参阅 :doc:`../janim/items/text` 文档中的介绍。"
msgstr ""

#: ../../source/tutorials/item_group.rst:178
msgid "名词解释"
msgstr ""

#: ../../source/tutorials/item_group.rst:180
msgid ":class:`~.Group` 的嵌套形成了一个层级结构，当我们讨论物件组时，往往会涉及多个名词指代这个层级结构的不同部分。"
msgstr ""

#: ../../source/tutorials/item_group.rst:182
msgid "以具体例子来说，对于"
msgstr ""

#: ../../source/tutorials/item_group.rst:198
msgid "所产生的层级结构而言，它们有如下的关系："
msgstr ""

#: ../../source/tutorials/item_group.rst:205
msgid "在以 ``Group #1`` 作为 **根物件** 的这个层级结构中："
msgstr ""

#: ../../source/tutorials/item_group.rst:207
msgid "直接与它相关的下一层，也就是绿色这一层的物件，被称为 **子物件**。"
msgstr ""

#: ../../source/tutorials/item_group.rst:209
msgid "可以使用 ``for sub in group:`` 的形式来遍历子物件。"
msgstr ""

#: ../../source/tutorials/item_group.rst:213
msgid ""
"可以直接访问 ``.children`` 列表，但请勿直接删改， 应通过 :meth:`~.Relation.add` "
":meth:`~.Relation.remove` 等方法，否则会造成意料之外的效果。"
msgstr ""

#: ../../source/tutorials/item_group.rst:216
msgid "这里暴露对 ``.children`` 的访问只是为了方便遍历等操作。"
msgstr ""

#: ../../source/tutorials/item_group.rst:218
msgid "它下面所有层，在这个例子中的绿色层和蓝色层的物件，被统称为 **后代物件**。"
msgstr ""

#: ../../source/tutorials/item_group.rst:220
msgid "可以使用 ``.descendants()`` 方法得知所有后代物件。"
msgstr ""

#: ../../source/tutorials/item_group.rst:222
msgid "与 **子物件** 与 **后代物件** 的概念类似，层级向上还有 **父物件** 与 **祖先物件** 的概念："
msgstr ""

#: ../../source/tutorials/item_group.rst:224
msgid ""
"对于 ``Star`` 物件，若将其当作根物件，那么 ``Group #2`` 则是它的父物件， ``Group #2`` 和 ``Group "
"#1`` 是它的祖先物件。"
msgstr ""

#: ../../source/tutorials/item_group.rst:228
msgid "从设计上来说，一个物件可能会有多个父物件，但其实在使用时并不太需要关心这一点， 因为使用时我们主要讨论子物件与后代物件在各个功能中发挥的作用。"
msgstr ""

